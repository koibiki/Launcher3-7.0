package com.android.launcher3.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PackageName = new Property(1, String.class, "packageName", false, "PACKAGENAME");
        public final static Property Date = new Property(2, String.class, "date", false, "DATE");
        public final static Property WifiConnect = new Property(3, boolean.class, "wifiConnect", false, "WIFICONNECT");
        public final static Property MobileConnect = new Property(4, boolean.class, "mobileConnect", false, "mobileconnect");
        public final static Property Latitude = new Property(5, double.class, "latitude", false, "LATITUDE");
        public final static Property Longtitude = new Property(6, double.class, "longtitude", false, "LONGTITUDE");
        public final static Property InWorkspace = new Property(7, boolean.class, "inWorkspace", false, "INWORKSPACE");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PACKAGENAME\" TEXT," + // 1: packageName
                "\"DATE\" TEXT," + // 2: date
                "\"WIFICONNECT\" INTEGER NOT NULL ," + // 3: wifiConnect
                "\"mobileconnect\" INTEGER NOT NULL ," + // 4: mobileConnect
                "\"LATITUDE\" REAL NOT NULL ," + // 5: latitude
                "\"LONGTITUDE\" REAL NOT NULL ," + // 6: longtitude
                "\"INWORKSPACE\" INTEGER NOT NULL );"); // 7: inWorkspace
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(2, packageName);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
        stmt.bindLong(4, entity.getWifiConnect() ? 1L: 0L);
        stmt.bindLong(5, entity.getMobileConnect() ? 1L: 0L);
        stmt.bindDouble(6, entity.getLatitude());
        stmt.bindDouble(7, entity.getLongtitude());
        stmt.bindLong(8, entity.getInWorkspace() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(2, packageName);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
        stmt.bindLong(4, entity.getWifiConnect() ? 1L: 0L);
        stmt.bindLong(5, entity.getMobileConnect() ? 1L: 0L);
        stmt.bindDouble(6, entity.getLatitude());
        stmt.bindDouble(7, entity.getLongtitude());
        stmt.bindLong(8, entity.getInWorkspace() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // packageName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // date
            cursor.getShort(offset + 3) != 0, // wifiConnect
            cursor.getShort(offset + 4) != 0, // mobileConnect
            cursor.getDouble(offset + 5), // latitude
            cursor.getDouble(offset + 6), // longtitude
            cursor.getShort(offset + 7) != 0 // inWorkspace
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPackageName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWifiConnect(cursor.getShort(offset + 3) != 0);
        entity.setMobileConnect(cursor.getShort(offset + 4) != 0);
        entity.setLatitude(cursor.getDouble(offset + 5));
        entity.setLongtitude(cursor.getDouble(offset + 6));
        entity.setInWorkspace(cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
